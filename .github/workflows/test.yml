name: Cargo test

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always

permissions:
  contents: read
  packages: read
  pull-requests: read
  checks: write

jobs:
  stable:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        lfs: false
    - run: sudo apt-get install -y libmetis-dev libnlopt-dev gmsh
    - id: toolchain
      uses: dtolnay/rust-toolchain@master
      with:
        components: clippy
        toolchain: stable
    - run: rustup override set ${{steps.toolchain.outputs.name}}
    - name: Rust cache
      uses: actions/cache@v4
      with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-stable-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-stable-
    - uses: olix0r/cargo-action-fmt/setup@v2
    - run: cargo check -q --all --message-format=json | cargo-action-fmt
    - name: Run clippy
      uses: clechasseur/rs-clippy-check@v4
    - name: Run cargo test
      uses: clechasseur/rs-cargo@v4
      with:
        command: test
        args: --features=metis,nlopt
    - name: Run cargo test --release
      uses: clechasseur/rs-cargo@v4
      with:
        command: test
        args: --release --features=metis,nlopt
    - name: Run example/adapt_ellipse
      uses: clechasseur/rs-cargo@v4
      with:
        command: run
        args: --example adapt_ellipse --features=metis --release
    - name: Run example/dual_mesh_2d
      uses: clechasseur/rs-cargo@v4
      with:
        command: run
        args: --example dual_mesh_2d --release
    - name: Run example/partition_3d
      uses: clechasseur/rs-cargo@v4
      with:
        command: run
        args: --example partition_3d --features=metis --release
    - name: Run example/dual_mesh_3d
      uses: clechasseur/rs-cargo@v4
      with:
        command: run
        args: --example dual_mesh_3d --release
  c_api:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        lfs: false
    - run: sudo apt-get install -y libmetis-dev libnlopt-dev
    - id: toolchain
      uses: dtolnay/rust-toolchain@master
      with:
        components: clippy
        toolchain: stable
    - run: rustup override set ${{steps.toolchain.outputs.name}}
    - name: Rust cache
      uses: actions/cache@v4
      with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-stable-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-stable-
    - name: Test FFI 16bit tags
      run: cargo build -p tucanos-ffi && cargo test -p tucanos-ffi-test
    - name: Test FFI 32bit tags
      run: cargo build -p tucanos-ffi --features 32bit-tags && cargo test -p tucanos-ffi-test
    - name: Test FFI 64bit tags
      run: cargo build -p tucanos-ffi --features 64bit-tags && cargo test -p tucanos-ffi-test
  python:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        lfs: false
    - run: sudo apt-get install -y libmetis-dev libnlopt-dev
    - id: toolchain
      uses: dtolnay/rust-toolchain@master
      with:
        components: clippy
        toolchain: stable
    - run: rustup override set ${{steps.toolchain.outputs.name}}
    - name: Rust cache
      uses: actions/cache@v4
      with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-stable-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-stable-
    - name: Run ruff
      run: |
        pip install ruff
        ruff check
        ruff format --check
    - name: Run clippy (pytmesh)
      uses: clechasseur/rs-clippy-check@v4
      with:
        args: -p pytmesh
    - name: Test pytmesh
      run: |
        cd pytmesh
        pip install -e .[test]
        python -m unittest discover
    - name: Test pytmesh (with metis)
      run: |
        cd pytmesh
        pip install -C metis=true -e .
        python -c "import pytmesh; assert(pytmesh.HAVE_METIS)"
    - name: Run clippy (pytucanos)
      uses: clechasseur/rs-clippy-check@v4
      with:
        args: -p pytucanos
    - name: Test pytucanos
      run: |
        cd pytucanos
        pip install -e .
        python -m unittest discover
    - name: Run the pytucanos examples
      run: |
        cd pytucanos
        pip install -e .
        python examples/example_2d.py
        python examples/example_2d_aniso.py
        python examples/example_2d_hessian.py
        python examples/example_2d_implied.py
        python examples/example_2d_parallel.py  
    - name: Test pytucanos (with metis)
      run: |
        cd pytucanos
        pip install -C metis=true -e .
        python -c "import pytucanos; assert(pytucanos.HAVE_METIS)"