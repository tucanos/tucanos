extern crate cbindgen;

use std::{env, path::PathBuf};
#[cfg(feature = "64bit-tags")]
const TUCANOS_TAG: Option<&str> = Some("#define TUCANOS_TAG_64");
#[cfg(feature = "32bit-tags")]
const TUCANOS_TAG: Option<&str> = Some("#define TUCANOS_TAG_32");
#[cfg(not(any(feature = "32bit-tags", feature = "64bit-tags")))]
const TUCANOS_TAG: Option<&str> = None;

fn main() {
    println!("cargo:rerun-if-env-changed=DEP_TUCANOS_RPATH");
    println!("cargo:rerun-if-changed=src");
    if let Ok(rpath) = std::env::var("DEP_TUCANOS_RPATH") {
        #[cfg(any(target_os = "linux", target_os = "macos"))]
        println!("cargo:rustc-link-arg=-Wl,-rpath,{rpath}");
    }
    let mut out_path = PathBuf::from(env::var("OUT_DIR").unwrap());
    for _ in 0..3 {
        out_path.pop();
    }
    let out_file = out_path.join("tucanos.h");
    let config = cbindgen::Config {
        usize_is_size_t: true,
        language: cbindgen::Language::C,
        style: cbindgen::Style::Both,
        after_includes: TUCANOS_TAG.map(std::convert::Into::into),
        ..Default::default()
    };
    cbindgen::Builder::new()
        .with_config(config)
        .with_autogen_warning("/* This file is automatically generated when building Tucanos */")
        .with_pragma_once(true)
        .with_crate(".")
        .with_define("feature", "64bit-tags", "TUCANOS_TAG_64")
        .with_define("feature", "32bit-tags", "TUCANOS_TAG_32")
        .generate()
        .expect("Unable to generate bindings")
        .write_to_file(out_file);
}
